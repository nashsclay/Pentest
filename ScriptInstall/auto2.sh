#!/bin/bash

function check(){
   local OPTIND opt i
   while getopts "c:i:" opt; do
     case $opt in
       c) echo "$computerworkingon";computerworkingon="$OPTARG";;
       i) computerworkingip="$OPTARG";;
      \?) exit 1 ;;
     esac
   done
   shift $((OPTIND -1))
}


function main(){
check $@
DirUserPath="/home/$SUDO_USER/$computerworkingon"
RunningUserPath="/home/$SUDO_USER/$computerworkingon/$computerworkingon"
echo "***************************************************************************"
echo "Scripts will be stored in: $DirUserPath"
echo "***************************************************************************"
printf "\n"
printf "\n"
printf "\n"
echo "***************************************************************************************************"
echo "For best results, place IP list file as same directory which this program is being ran from."
printf "\n"
printf "\n"
echo "Please confirm settings used below:"
printf "\n"
echo "Project Name: $computerworkingon"
echo "Project IP List Location: $PWD/$computerworkingip"
echo "New Path for Project: $DirUserPath"
echo "***************************************************************************************************"
printf "\n"
printf "\n"
read -p "Press the Enter key to continue once you have moved the IP list file."

FILE="$PWD/$computerworkingip"
if [ -f "$FILE" ]; then
    echo "$computerworkingip exists."
else
    printf "\n" 
    echo "$FILE does not exist. Now exiting program..."
    exit 0
fi

# Leave in for testing .... read -p "Please confirm working on project: $computerworkingon and with IP list file: $computerworkingip " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1
mkdir "$DirUserPath"
cp "$computerworkingip" "$DirUserPath"
printf "\n"
printf "\n"
echo "********************************"
echo "********************************"
echo "    Now Starting: NMAP Scans"
echo "********************************"
echo "********************************"
printf "\n"
printf "\n"
echo "Working from list: $DirUserPath/$computerworkingip" | sudo tee "$RunningUserPath"
echo "sudo nmap -sT -iL $RunningUserPath-ip -oA $RunningUserPath-sT"
printf "\n"
nmap -sT -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-sT
echo "***************************************************************************"
echo "Exporting IPs with ports 21, 22, 80, 443 to files in: $DirUserPath"
echo "***************************************************************************"
awk '/21\/open/ {print $2}' "$RunningUserPath-sT.gnmap" > "$RunningUserPath-port21"
awk '/22\/open/ {print $2}' "$RunningUserPath-sT.gnmap" > "$RunningUserPath-port22"
awk '/80\/open/ {print $2}' "$RunningUserPath-sT.gnmap" > "$RunningUserPath-port80"
awk '/443\/open/ {print $2}' "$RunningUserPath-sT.gnmap" > "$RunningUserPath-port443"
printf "\n"
printf "\n"
echo "sudo nmap -sU --top-ports 100 -iL $DirUserPath/$computerworkingip -oA $RunningUserPath-sU"
printf "\n"
nmap -sU --top-ports 100 -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-sU
printf "\n"
printf "\n"
echo "sudo nmap -sV -O -iL $DirUserPath/$computerworkingip -oA $RunningUserPath-sVO"
printf "\n"
nmap -sV -O -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-sVO
printf "\n"
printf "\n"
echo "sudo nmap -A -iL $DirUserPath/$computerworkingip -oA $RunningUserPath-A"
printf "\n"
nmap -A -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-A
printf "\n"
printf "\n"
echo "sudo nmap --script=default -iL $DirUserPath/$computerworkingip -oA $RunningUserPath-default"
printf "\n"
nmap --script=default -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-default
printf "\n"
printf "\n"
echo "sudo nmap --script=vuln -iL $DirUserPath/$computerworkingip -oA $RunningUserPath-vuln"
printf "\n"
nmap --script=vuln -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-vuln
printf "\n"
printf "\n"
echo "sudo nmap --script=auth -iL $DirUserPath/$computerworkingip -oA $RunningUserPath-auth"
printf "\n"
nmap --script=auth -iL "$DirUserPath/$computerworkingip" -oA "$DirUserPath/$computerworkingon"-auth
printf "\n"
printf "\n"
echo "Your results can be found in $DirUserPath"
mkdir "$DirUserPath/nmap_scans"
mkdir "$DirUserPath/nikto_scans"
mkdir "$DirUserPath/gobuster_scans"
mv "$DirUserPath/$computerworkingon-A.*" "$DirUserPath/nmap_scans"
mv "$DirUserPath/$computerworkingon-auth.*" "$DirUserPath/nmap_scans"
mv "$DirUserPath/$computerworkingon-default.*" "$DirUserPath/nmap_scans"
mv "$DirUserPath/$computerworkingon-sT.*" "$DirUserPath/nmap_scans"
mv "$DirUserPath/$computerworkingon-sU.*" "$DirUserPath/nmap_scans"
mv "$DirUserPath/$computerworkingon-sVO.*" "$DirUserPath/nmap_scans"
mv "$DirUserPath/$computerworkingon-vuln.*" "$DirUserPath/nmap_scans"
chown -R "$SUDO_USER":"$SUDO_USER" "$DirUserPath"

printf "\n"
printf "\n"
echo "*********************************"
echo "*********************************"
echo "    Now Starting: FTP Dumps"
echo "*********************************"
echo "*********************************"
printf "\n"
printf "\n"
readarray -t arrtwentyone <"$RunningUserPath-port21"
mkdir "$DirUserPath/FTP_Dumps"
if [ -s "$RunningUserPath-port21" ]; then
for j in "${arrtwentyone[@]}" ; do
    wget --no-passive -m ftp://anonymous:password@"$j" -P "$DirUserPath/FTP_Dumps/$j"
done
else
   echo "No FTP Dumps on port 21 required"
fi

printf "\n"
printf "\n"
echo "*********************************"
echo "*********************************"
echo "    Now Starting: Nikto Scans"
echo "*********************************"
echo "*********************************"
printf "\n"
printf "\n"
readarray -t arreighty <"$RunningUserPath-port80"
readarray -t arrfourfourthree <"$RunningUserPath-port443"
if [ -s "$RunningUserPath-port80" ]; then
   nikto -h "$RunningUserPath-port80" -Format txt -o "$RunningUserPath-port80-nikto"
else
   echo "No port 80 nikto scans required"
fi
if [ -s "$RunningUserPath-port443" ]; then
   nikto -h "$RunningUserPath-port443" -Format txt -o "$RunningUserPath-port443-nikto"
else
   echo "No port 443 nikto scans required"
fi

mv "$DirUserPath/$computerworkingon-port80-nikto" "$DirUserPath/nikto_scans"
mv "$DirUserPath/$computerworkingon-por443-nikto" "$DirUserPath/nikto_scans"

printf "\n"
printf "\n"
echo "************************************"
echo "************************************"
echo "    Now Starting: GoBuster Scans"
echo "************************************"
echo "************************************"
printf "\n"
printf "\n"
if [ -s "$RunningUserPath-port80" ]; then
for i in "${IP[@]}" ; do
    gobuster dir -e -u http://"$i":80/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o "$DirUserPath/$computerworkingon-port80-GoBuster"
done
else
   echo "No GoBuster scan required on port 80"
fi
if [ -s "$RunningUserPath-port443" ]; then
   for i in "${IP[@]}" ; do
    gobuster dir -e -u https://"$i":443/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o "$DirUserPath/$computerworkingon-port443-GoBuster"
done
else
   echo "No GoBuster scan required on port 443"
fi
}

main $@
